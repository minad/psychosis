	/** rnrs eval **/
        // define_proc("eval", proc_eval);
        // define_proc("environment", proc_environment);

	/** rnrs syntax-case **/
        // define_proc("make-variable-transformer", proc_make_variable_transformer);
        // define_proc("identifier?", proc_identifier_p);
        // define_proc("bound-identifier=?", proc_bound_identifier_equal_p);
        // define_proc("free-identifier=?", proc_free_identifier_equal_p);
        // define_proc("syntax->datum", proc_syntax_to_datum);
        // define_proc("datum->syntax", proc_datum_to_syntax);
        // define_proc("generate-temporaries", proc_generate_temporaries);
        // define_proc("assertion-violation", proc_assertion_violation);
        // define_proc("assertion-violation?", proc_assertion_violation_p);
        // define_macro("identifier-syntax", macro_identifier_syntax);

	/** rnrs conditions **/
        // define_proc("condition", proc_condition);
        // define_proc("condition-accessor", proc_condition_accessor);
        // define_proc("condition-irritants", proc_condition_irritants);
        // define_proc("condition-message", proc_condition_message);
        // define_proc("condition-predicate", proc_condition_predicate);
        // define_proc("condition-who", proc_condition_who);
        // define_proc("condition?", proc_condition_p);
        // define_proc("simple-conditions", proc_simple_conditions);
        // define_proc("irritants-condition?", proc_irritants_condition_p);
        // define_proc("make-irritants-condition", proc_make_irritants_condition);
        // define_proc("make-lexical-violation", proc_make_lexical_violation);
        // define_proc("make-message-condition", proc_make_message_condition);
        // define_proc("make-error", proc_make_error);
        // define_proc("make-serious-condition", proc_make_serious_condition);
        // define_proc("make-who-condition", proc_make_who_condition);
        // define_proc("message-condition?", proc_message_condition_p);
        // define_proc("serious-condition?", proc_serious_condition_p);
        // define_proc("make-assertion-violation", proc_make_assertion_violation);
        // define_proc("implementation-restriction-violation?", proc_implementation_restriction_violation_p);
        // define_proc("make-implementation-restriction-violation", proc_make_implementation_restriction_violation);
        // define_proc("make-no-infinities-violation", proc_make_no_infinities_violation);
        // define_proc("make-no-nans-violation", proc_make_no_nans_violation);
        // define_proc("make-non-continuable-violation", proc_make_non_continuable_violation);
        // define_proc("make-syntax-violation", proc_make_syntax_violation);
        // define_proc("make-undefined-violation", proc_make_undefined_violation);
        // define_proc("make-violation", proc_make_violation);
        // define_proc("make-warning", proc_make_warning);
        // define_proc("no-infinities-violation?", proc_no_infinities_violation_p);
        // define_proc("no-nans-violation?", proc_no_nans_violation_p);
        // define_proc("non-continuable-violation?", proc_non_continuable_violation_p);
        // define_proc("syntax-violation", proc_syntax_violation);
        // define_proc("syntax-violation-form", proc_syntax_violation_form);
        // define_proc("syntax-violation-subform", proc_syntax_violation_subform);
        // define_proc("syntax-violation?", proc_syntax_violation_p);
        // define_proc("violation?", proc_violation_p);
        // define_proc("warning?", proc_warning_p);
        // define_proc("who-condition?", proc_who_condition_p);
        // define_proc("undefined-violation?", proc_undefined_violation_p);
        // define_proc("lexical-violation?", proc_lexical_violation_p);
        // define_proc("error", proc_error);
        // define_proc("error?", proc_error_p);

	/** rnrs exceptions **/
        // define_proc("with-exception-handler", proc_with_exception_handler);
	// define_macro("guard", macro_guard);
        // define_proc("raise", proc_raise);
        // define_proc("raise-continuable", proc_raise_continuable);

        /** rnrs records **/
        // define_macro("define-record-type", macro_define_record_type);
        // define_macro("record-constructor-descriptor", macro_record_constructor_descriptor);
        // define_macro("record-type-descriptor", macro_record_type_descriptor);
        // define_proc("record-accessor", proc_record_accessor);
        // define_proc("record-constructor", proc_record_constructor);
        // define_proc("record-field-mutable?", proc_record_field_mutable_p);
        // define_proc("record-mutator", proc_record_mutator);
        // define_proc("record-predicate", proc_record_predicate);
        // define_proc("record-rtd", proc_record_rtd);
        // define_proc("record-type-descriptor?", proc_record_type_descriptor_p);
        // define_proc("record-type-field-names", proc_record_type_field_names);
        // define_proc("record-type-generative?", proc_record_type_generative_p);
        // define_proc("record-type-name", proc_record_type_name);
        // define_proc("record-type-opaque?", proc_record_type_opaque_p);
        // define_proc("record-type-parent", proc_record_type_parent);
        // define_proc("record-type-sealed?", proc_record_type_sealed_p);
        // define_proc("record-type-uid", proc_record_type_uid);
        // define_proc("record?", proc_record_p);

        /** rnrs r5rs **/
        // define_proc("scheme-report-environment", proc_scheme_report_environment);
        // define_macro("delay", macro_delay);
        // define_proc("force", proc_force);
        // define_proc("exact->inexact", proc_exact_to_inexact);
        // define_proc("inexact->exact", proc_inexact_to_exact);
        // define_proc("remainder", proc_remainder);
        // define_proc("quotient", proc_quotient);
        // define_proc("modulo", proc_modulo);
        // define_proc("null-environment", proc_null_environment);

        /** rnrs io ports **/
        // define_macro("file-options", macro_file_options);
        // define_proc("call-with-port", proc_call_with_port);
        // define_proc("buffer-mode?", proc_buffer_mode_p);
        // define_macro("buffer-mode", macro_buffer_mode);
        // define_proc("latin-1-codec", proc_latin_1_codec);
        // define_proc("utf-16-codec", proc_utf_16_codec);
        // define_proc("utf-8-codec", proc_utf_8_codec);
        // define_macro("eol-style", macro_eol_style);
        // define_proc("native-eol-style", proc_native_eol_style);
        // define_proc("i/o-decoding-error?", proc_i/o_decoding_error_p);
        // define_proc("i/o-encoding-error-char", proc_i/o_encoding_error_char);
        // define_proc("i/o-encoding-error?", proc_i/o_encoding_error_p);
        // define_proc("i/o-error-filename", proc_i/o_error_filename);
        // define_proc("i/o-error-port", proc_i/o_error_port);
        // define_proc("i/o-error-position", proc_i/o_error_position);
        // define_proc("i/o-error?", proc_i/o_error_p);
        // define_proc("i/o-file-already-exists-error?", proc_i/o_file_already_exists_error_p);
        // define_proc("i/o-file-does-not-exist-error?", proc_i/o_file_does_not_exist_error_p);
        // define_proc("i/o-file-is-read-only-error?", proc_i/o_file_is_read_only_error_p);
        // define_proc("i/o-file-protection-error?", proc_i/o_file_protection_error_p);
        // define_proc("i/o-filename-error?", proc_i/o_filename_error_p);
        // define_proc("i/o-invalid-position-error?", proc_i/o_invalid_position_error_p);
        // define_proc("i/o-port-error?", proc_i/o_port_error_p);
        // define_proc("i/o-read-error?", proc_i/o_read_error_p);
        // define_proc("i/o-write-error?", proc_i/o_write_error_p);
        // define_proc("make-i/o-decoding-error", proc_make_i/o_decoding_error);
        // define_proc("make-i/o-encoding-error", proc_make_i/o_encoding_error);
        // define_proc("make-i/o-error", proc_make_i/o_error);
        // define_proc("make-i/o-file-already-exists-error", proc_make_i/o_file_already_exists_error);
        // define_proc("make-i/o-file-does-not-exist-error", proc_make_i/o_file_does_not_exist_error);
        // define_proc("make-i/o-file-is-read-only-error", proc_make_i/o_file_is_read_only_error);
        // define_proc("make-i/o-file-protection-error", proc_make_i/o_file_protection_error);
        // define_proc("make-i/o-filename-error", proc_make_i/o_filename_error);
        // define_proc("make-i/o-invalid-position-error", proc_make_i/o_invalid_position_error);
        // define_proc("make-i/o-port-error", proc_make_i/o_port_error);
        // define_proc("make-i/o-read-error", proc_make_i/o_read_error);
        // define_proc("make-i/o-write-error", proc_make_i/o_write_error);
        // define_proc("make-transcoder", proc_make_transcoder);
        // define_proc("native-transcoder", proc_native_transcoder);
        // define_proc("open-bytevector-input-port", proc_open_bytevector_input_port);
        // define_proc("open-bytevector-output-port", proc_open_bytevector_output_port);
        // define_proc("open-file-input-port", proc_open_file_input_port);
        // define_proc("open-file-input/output-port", proc_open_file_input/output_port);
        // define_proc("open-file-output-port", proc_open_file_output_port);
        // define_proc("open-string-input-port", proc_open_string_input_port);
        // define_proc("open-string-output-port", proc_open_string_output_port);
        // define_proc("binary-port?", proc_binary_port_p);
        // define_proc("call-with-bytevector-output-port", proc_call_with_bytevector_output_port);
        // define_proc("call-with-string-output-port", proc_call_with_string_output_port);
        // define_proc("close-port", proc_close_port);
        // define_proc("output-port-buffer-mode", proc_output_port_buffer_mode);
        // define_proc("port-eof?", proc_port_eof_p);
        // define_proc("port-has-port-position?", proc_port_has_port_position_p);
        // define_proc("port-has-set-port-position!?", proc_port_has_set_port_position_p);
        // define_proc("port-position", proc_port_position);
        // define_proc("port-transcoder", proc_port_transcoder);
        // define_proc("port?", proc_port_p);
        // define_proc("set-port-position!", proc_set_port_position);
        // define_proc("standard-error-port", proc_standard_error_port);
        // define_proc("standard-input-port", proc_standard_input_port);
        // define_proc("standard-output-port", proc_standard_output_port);
        // define_proc("textual-port?", proc_textual_port_p);
        // define_proc("transcoded-port", proc_transcoded_port);
        // define_proc("transcoder-codec", proc_transcoder_codec);
        // define_proc("transcoder-eol-style", proc_transcoder_eol_style);
        // define_proc("transcoder-error-handling-mode", proc_transcoder_error_handling_mode);
        // define_proc("put-bytevector", proc_put_bytevector);
        // define_proc("put-char", proc_put_char);
        // define_proc("put-datum", proc_put_datum);
        // define_proc("put-string", proc_put_string);
        // define_proc("put-u8", proc_put_u8);
        // define_proc("get-bytevector-all", proc_get_bytevector_all);
        // define_proc("get-bytevector-n", proc_get_bytevector_n);
        // define_proc("get-bytevector-some", proc_get_bytevector_some);
        // define_proc("get-char", proc_get_char);
        // define_proc("get-datum", proc_get_datum);
        // define_proc("get-line", proc_get_line);
        // define_proc("get-string-all", proc_get_string_all);
        // define_proc("get-string-n!", proc_get_string_n);
        // define_proc("get-string-n", proc_get_string_n);
        // define_proc("get-u8", proc_get_u8);
        // define_proc("lookahead-char", proc_lookahead_char);
        // define_proc("lookahead-u8", proc_lookahead_u8);
        // define_proc("string->bytevector", proc_string_to_bytevector);
        // define_proc("bytevector->string", proc_bytevector_to_string);
        // define_proc("eof-object", proc_eof_object);
        // define_proc("eof-object?", proc_eof_object_p);
        // define_macro("error-handling-mode", macro_error_handling_mode);

        /** rnrs files **/
        // define_proc("file-exists?", proc_file_exists_p);
        // define_proc("delete-file", proc_delete_file);

        /** rnrs io simple **/
        // define_proc("call-with-input-file", proc_call_with_input_file);
        // define_proc("call-with-output-file", proc_call_with_output_file);
        // define_proc("input-port?", proc_input_port_p);
        // define_proc("output-port?", proc_output_port_p);
        // define_proc("current-input-port", proc_current_input_port);
        // define_proc("current-output-port", proc_current_output_port);
        // define_proc("current-error-port", proc_current_error_port);
        // define_proc("with-input-from-file", proc_with_input_from_file);
        // define_proc("with-output-to-file", proc_with_output_to_file);
        // define_proc("open-input-file", proc_open_input_file);
        // define_proc("open-output-file", proc_open_output_file);
        // define_proc("close-input-port", proc_close_input_port);
        // define_proc("close-output-port", proc_close_output_port);
        // define_proc("read-char", proc_read_char);
        // define_proc("peek-char", proc_peek_char);
        // define_proc("read", proc_read);
        // define_proc("write-char", proc_write_char);
        // define_proc("write", proc_write);
        define_proc("display", proc_display);
        define_proc("newline", proc_newline);

        /** rnrs control **/
        // define_macro("unless", macro_unless);
        // define_macro("when", macro_when);
        // define_macro("case-lambda", macro_case_lambda);

        /** rnrs unicode **/
        // define_proc("char-downcase", proc_char_downcase);
        // define_proc("char-foldcase", proc_char_foldcase);
        // define_proc("char-upcase", proc_char_upcase);
        // define_proc("char-ci<=?", proc_char_ci_lessequal_p);
        // define_proc("char-ci<?", proc_char_ci_less_p);
        // define_proc("char-ci=?", proc_char_ci_eqaul_p);
        // define_proc("char-ci>=?", proc_char_ci_greaterequal_p);
        // define_proc("char-ci>?", proc_char_ci_greater_p);
        // define_proc("char-alphabetic?", proc_char_alphabetic_p);
        // define_proc("char-general-category", proc_char_general_category);
        // define_proc("char-lower-case?", proc_char_lower_case_p);
        // define_proc("char-numeric?", proc_char_numeric_p);
        // define_proc("char-title-case?", proc_char_title_case_p);
        // define_proc("char-titlecase", proc_char_titlecase);
        // define_proc("char-upper-case?", proc_char_upper_case_p);
        // define_proc("char-whitespace?", proc_char_whitespace_p);
        // define_proc("string-downcase", proc_string_downcase);
        // define_proc("string-foldcase", proc_string_foldcase);
        // define_proc("string-titlecase", proc_string_titlecase);
        // define_proc("string-upcase", proc_string_upcase);
        // define_proc("string-ci-hash", proc_string_ci_hash);
        // define_proc("string-ci<=?", proc_string_ci_lessequal_p);
        // define_proc("string-ci<?", proc_string_ci_less_p);
        // define_proc("string-ci=?", proc_string_ci_equal_p);
        // define_proc("string-ci>=?", proc_string_ci_greaterequal_p);
        // define_proc("string-ci>?", proc_string_ci_greater_p);
        // define_proc("string-normalize-nfc", proc_string_normalize_nfc);
        // define_proc("string-normalize-nfd", proc_string_normalize_nfd);
        // define_proc("string-normalize-nfkc", proc_string_normalize_nfkc);
        // define_proc("string-normalize-nfkd", proc_string_normalize_nfkd);

        /** rnrs sorting **/
        // define_proc("vector-sort!", proc_vector_sort);
        // define_proc("vector-sort", proc_vector_sort);
        // define_proc("list-sort", proc_list_sort);

        /** rnrs hashtables **/
        // define_proc("make-eq-hashtable", proc_make_eq_hashtable);
        // define_proc("make-eqv-hashtable", proc_make_eqv_hashtable);
        // define_proc("make-hashtable", proc_make_hashtable);
        // define_proc("hashtable-clear!", proc_hashtable_clear);
        // define_proc("hashtable-contains?", proc_hashtable_contains_p);
        // define_proc("hashtable-copy", proc_hashtable_copy);
        // define_proc("hashtable-delete!", proc_hashtable_delete);
        // define_proc("hashtable-entries", proc_hashtable_entries);
        // define_proc("hashtable-equivalence-function", proc_hashtable_equivalence_function);
        // define_proc("hashtable-hash-function", proc_hashtable_hash_function);
        // define_proc("hashtable-keys", proc_hashtable_keys);
        // define_proc("hashtable-mutable?", proc_hashtable_mutable_p);
        // define_proc("hashtable-ref", proc_hashtable_ref);
        // define_proc("hashtable-set!", proc_hashtable_set);
        // define_proc("hashtable-size", proc_hashtable_size);
        // define_proc("hashtable-update!", proc_hashtable_update);
        // define_proc("hashtable?", proc_hashtable_p);
        // define_proc("equal-hash", proc_equal_hash);
        // define_proc("string-hash", proc_string_hash);
        // define_proc("symbol-hash", proc_symbol_hash);

        /** rnrs enums **/
        // define_proc("enum-set->list", proc_enum_set_to_list);
        // define_proc("enum-set-complement", proc_enum_set_complement);
        // define_proc("enum-set-constructor", proc_enum_set_constructor);
        // define_proc("enum-set-difference", proc_enum_set_difference);
        // define_proc("enum-set-indexer", proc_enum_set_indexer);
        // define_proc("enum-set-intersection", proc_enum_set_intersection);
        // define_proc("enum-set-member?", proc_enum_set_member_p);
        // define_proc("enum-set-projection", proc_enum_set_projection);
        // define_proc("enum-set-subset?", proc_enum_set_subset_p);
        // define_proc("enum-set-union", proc_enum_set_union);
        // define_proc("enum-set-universe", proc_enum_set_universe);
        // define_proc("enum-set=?", proc_enum_set_equal_p);
        // define_proc("make-enumeration", proc_make_enumeration);

        /** rnrs mutable-pairs **/
        // define_proc("set-car!", proc_set_car);
        // define_proc("set-cdr!", proc_set_cdr);

        /** rnrs mutable-strings **/
        // define_proc("string-fill!", proc_string_fill);
        // define_proc("string-set!", proc_string_set);

        /** rnrs lists **/
        // define_proc("find", proc_find);
        // define_proc("for-all", proc_for_all);
        // define_proc("exists", proc_exists);
        // define_proc("filter", proc_filter);
        // define_proc("partition", proc_partition);
        // define_proc("fold-left", proc_fold_left);
        // define_proc("fold-right", proc_fold_right);
        // define_proc("remove", proc_remove);
        // define_proc("remp", proc_remp);
        // define_proc("remq", proc_remq);
        // define_proc("remv", proc_remv);
        // define_proc("member", proc_member);
        // define_proc("memp", proc_memp);
        // define_proc("memq", proc_memq);
        // define_proc("memv", proc_memv);
        // define_proc("assoc", proc_assoc);
        // define_proc("assp", proc_assp);
        // define_proc("assq", proc_assq);
        // define_proc("assv", proc_assv);
        // define_proc("cons*", proc_cons_star);

        /** rnrs programs **/
        // define_proc("command-line", proc_command_line);
        // define_proc("exit", proc_exit);

        /** rnrs arithmetic bitwise **/
        // define_proc("bitwise-and", proc_bitwise_and);
        // define_proc("bitwise-arithmetic-shift", proc_bitwise_arithmetic_shift);
        // define_proc("bitwise-arithmetic-shift-left", proc_bitwise_arithmetic_shift_left);
        // define_proc("bitwise-arithmetic-shift-right", proc_bitwise_arithmetic_shift_right);
        // define_proc("bitwise-bit-count", proc_bitwise_bit_count);
        // define_proc("bitwise-bit-field", proc_bitwise_bit_field);
        // define_proc("bitwise-bit-set?", proc_bitwise_bit_set_p);
        // define_proc("bitwise-copy-bit", proc_bitwise_copy_bit);
        // define_proc("bitwise-copy-bit-field", proc_bitwise_copy_bit_field);
        // define_proc("bitwise-first-bit-set", proc_bitwise_first_bit_set);
        // define_proc("bitwise-if", proc_bitwise_if);
        // define_proc("bitwise-ior", proc_bitwise_ior);
        // define_proc("bitwise-length", proc_bitwise_length);
        // define_proc("bitwise-not", proc_bitwise_not);
        // define_proc("bitwise-reverse-bit-field", proc_bitwise_reverse_bit_field);
        // define_proc("bitwise-rotate-bit-field", proc_bitwise_rotate_bit_field);
        // define_proc("bitwise-xor", proc_bitwise_xor);

        /** rnrs bytevectors **/
        // define_proc("bytevector-fill!", proc_bytevector_fill);
        // define_proc("bytevector->sint-list", proc_bytevector_to_sint_list);
        // define_proc("bytevector->u8-list", proc_bytevector_to_u8_list);
        // define_proc("bytevector->uint-list", proc_bytevector_to_uint_list);
        // define_proc("bytevector-copy", proc_bytevector_copy);
        // define_proc("bytevector-ieee-double-native-ref", proc_bytevector_ieee_double_native_ref);
        // define_proc("bytevector-ieee-double-native-set!", proc_bytevector_ieee_double_native_set);
        // define_proc("bytevector-ieee-double-ref", proc_bytevector_ieee_double_ref);
        // define_proc("bytevector-ieee-single-native-ref", proc_bytevector_ieee_single_native_ref);
        // define_proc("bytevector-ieee-single-native-set!", proc_bytevector_ieee_single_native_set);
        // define_proc("bytevector-ieee-single-ref", proc_bytevector_ieee_single_ref);
        // define_proc("bytevector-length", proc_bytevector_length);
        // define_proc("bytevector-s16-native-ref", proc_bytevector_s16_native_ref);
        // define_proc("bytevector-s16-native-set!", proc_bytevector_s16_native_set);
        // define_proc("bytevector-s16-ref", proc_bytevector_s16_ref);
        // define_proc("bytevector-s16-set!", proc_bytevector_s16_set);
        // define_proc("bytevector-s32-native-ref", proc_bytevector_s32_native_ref);
        // define_proc("bytevector-s32-native-set!", proc_bytevector_s32_native_set);
        // define_proc("bytevector-s32-ref", proc_bytevector_s32_ref);
        // define_proc("bytevector-s32-set!", proc_bytevector_s32_set);
        // define_proc("bytevector-s64-native-ref", proc_bytevector_s64_native_ref);
        // define_proc("bytevector-s64-native-set!", proc_bytevector_s64_native_set);
        // define_proc("bytevector-s64-ref", proc_bytevector_s64_ref);
        // define_proc("bytevector-s64-set!", proc_bytevector_s64_set);
        // define_proc("bytevector-s8-ref", proc_bytevector_s8_ref);
        // define_proc("bytevector-s8-set!", proc_bytevector_s8_set);
        // define_proc("bytevector-sint-ref", proc_bytevector_sint_ref);
        // define_proc("bytevector-sint-set!", proc_bytevector_sint_set);
        // define_proc("bytevector-u16-native-ref", proc_bytevector_u16_native_ref);
        // define_proc("bytevector-u16-native-set!", proc_bytevector_u16_native_set);
        // define_proc("bytevector-u16-ref", proc_bytevector_u16_ref);
        // define_proc("bytevector-u16-set!", proc_bytevector_u16_set);
        // define_proc("bytevector-u32-native-ref", proc_bytevector_u32_native_ref);
        // define_proc("bytevector-u32-native-set!", proc_bytevector_u32_native_set);
        // define_proc("bytevector-u32-ref", proc_bytevector_u32_ref);
        // define_proc("bytevector-u32-set!", proc_bytevector_u32_set);
        // define_proc("bytevector-u64-native-ref", proc_bytevector_u64_native_ref);
        // define_proc("bytevector-u64-native-set!", proc_bytevector_u64_native_set);
        // define_proc("bytevector-u64-ref", proc_bytevector_u64_ref);
        // define_proc("bytevector-u64-set!", proc_bytevector_u64_set);
        // define_proc("bytevector-u8-ref", proc_bytevector_u8_ref);
        // define_proc("bytevector-u8-set!", proc_bytevector_u8_set);
        // define_proc("bytevector-uint-ref", proc_bytevector_uint_ref);
        // define_proc("bytevector-uint-set!", proc_bytevector_uint_set);
        // define_proc("bytevector=?", proc_bytevector_equal_p);
        // define_proc("bytevector?", proc_bytevector_p);
        // define_proc("native-endianness", proc_native_endianness);
        // define_proc("make-bytevector", proc_make_bytevector);
        // define_proc("utf16->string", proc_utf16_to_string);
        // define_proc("utf32->string", proc_utf32_to_string);
        // define_proc("utf8->string", proc_utf8_to_string);
        // define_proc("string->utf16", proc_string_to_utf16);
        // define_proc("string->utf32", proc_string_to_utf32);
        // define_proc("string->utf8", proc_string_to_utf8);
        // define_proc("u8-list->bytevector", proc_u8_list_to_bytevector);
        // define_proc("sint-list->bytevector", proc_sint_list_to_bytevector);
        // define_proc("uint-list->bytevector", proc_uint_list_to_bytevector);
        // define_macro("endianness", macro_endianness);

        /** rnrs arithmetic fixnums **/
        // define_proc("fixnum?", proc_fixnum_p);
        // define_proc("fx*", proc_fx_star);
        // define_proc("fx*/carry", proc_fx_star_carry);
        // define_proc("fx+", proc_fx_add);
        // define_proc("fx+/carry", proc_fx_add_carry);
        // define_proc("fx-", proc_fx_subtract);
        // define_proc("fx-/carry", proc_fx_subtract_carry);
        // define_proc("fx<=?", proc_fx_lessequal_p);
        // define_proc("fx<?", proc_fx_less_p);
        // define_proc("fx=?", proc_fx_equal_p);
        // define_proc("fx>=?", proc_fx_greaterequal_p);
        // define_proc("fx>?", proc_fx_greater_p);
        // define_proc("fxand", proc_fxand);
        // define_proc("fxarithmetic-shift", proc_fxarithmetic_shift);
        // define_proc("fxarithmetic-shift-left", proc_fxarithmetic_shift_left);
        // define_proc("fxarithmetic-shift-right", proc_fxarithmetic_shift_right);
        // define_proc("fxbit-count", proc_fxbit_count);
        // define_proc("fxbit-field", proc_fxbit_field);
        // define_proc("fxbit-set?", proc_fxbit_set_p);
        // define_proc("fxcopy-bit", proc_fxcopy_bit);
        // define_proc("fxcopy-bit-field", proc_fxcopy_bit_field);
        // define_proc("fxdiv", proc_fxdiv);
        // define_proc("fxdiv-and-mod", proc_fxdiv_and_mod);
        // define_proc("fxdiv0", proc_fxdiv0);
        // define_proc("fxdiv0-and-mod0", proc_fxdiv0_and_mod0);
        // define_proc("fxeven?", proc_fxeven_p);
        // define_proc("fxfirst-bit-set", proc_fxfirst_bit_set);
        // define_proc("fxif", proc_fxif);
        // define_proc("fxior", proc_fxior);
        // define_proc("fxlength", proc_fxlength);
        // define_proc("fxmax", proc_fxmax);
        // define_proc("fxmin", proc_fxmin);
        // define_proc("fxmod", proc_fxmod);
        // define_proc("fxmod0", proc_fxmod0);
        // define_proc("fxnegative?", proc_fxnegative_p);
        // define_proc("fxnot", proc_fxnot);
        // define_proc("fxodd?", proc_fxodd_p);
        // define_proc("fxpositive?", proc_fxpositive_p);
        // define_proc("fxreverse-bit-field", proc_fxreverse_bit_field);
        // define_proc("fxrotate-bit-field", proc_fxrotate_bit_field);
        // define_proc("fxxor", proc_fxxor);
        // define_proc("fxzero?", proc_fxzero_p);

        /** rnrs arithmetic flonums **/
        // define_proc("fl*", proc_fl_multiply);
        // define_proc("fl+", proc_fl_add);
        // define_proc("fl-", proc_fl_subtract);
        // define_proc("fl/", proc_fl_divide);
        // define_proc("fl<=?", proc_fl_lessequal_p);
        // define_proc("fl<?", proc_fl_less_p);
        // define_proc("fl=?", proc_fl_equal_p);
        // define_proc("fl>=?", proc_fl_greaterequal_p);
        // define_proc("fl>?", proc_fl_greater_p);
        // define_proc("flabs", proc_flabs);
        // define_proc("flacos", proc_flacos);
        // define_proc("flasin", proc_flasin);
        // define_proc("flatan", proc_flatan);
        // define_proc("flceiling", proc_flceiling);
        // define_proc("flcos", proc_flcos);
        // define_proc("fldenominator", proc_fldenominator);
        // define_proc("fldiv", proc_fldiv);
        // define_proc("fldiv-and-mod", proc_fldiv_and_mod);
        // define_proc("fldiv0", proc_fldiv0);
        // define_proc("fldiv0-and-mod0", proc_fldiv0_and_mod0);
        // define_proc("fleven?", proc_fleven_p);
        // define_proc("flexp", proc_flexp);
        // define_proc("flexpt", proc_flexpt);
        // define_proc("flfinite?", proc_flfinite_p);
        // define_proc("flfloor", proc_flfloor);
        // define_proc("flinfinite?", proc_flinfinite_p);
        // define_proc("flinteger?", proc_flinteger_p);
        // define_proc("fllog", proc_fllog);
        // define_proc("flmax", proc_flmax);
        // define_proc("flmin", proc_flmin);
        // define_proc("flmod", proc_flmod);
        // define_proc("flmod0", proc_flmod0);
        // define_proc("flnan?", proc_flnan_p);
        // define_proc("flnegative?", proc_flnegative_p);
        // define_proc("flnumerator", proc_flnumerator);
        // define_proc("flodd?", proc_flodd_p);
        // define_proc("flonum?", proc_flonum_p);
        // define_proc("floor", proc_floor);
        // define_proc("flpositive?", proc_flpositive_p);
        // define_proc("flround", proc_flround);
        // define_proc("flsin", proc_flsin);
        // define_proc("flsqrt", proc_flsqrt);
        // define_proc("fltan", proc_fltan);
        // define_proc("fltruncate", proc_fltruncate);
        // define_proc("flush-output-port", proc_flush_output_port);
        // define_proc("flzero?", proc_flzero_p);
        // define_proc("fixnum->flonum", proc_fixnum_to_flonum);
        // define_proc("real->flonum", proc_real_to_flonum);
